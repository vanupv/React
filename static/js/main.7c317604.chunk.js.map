{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PATH_BASE","list","title","url","author","num_comments","points","objectID","counter","Search","props","value","onChange","children","type","Table","pattern","onDismiss","className","filter","searchTerm","item","toLowerCase","includes","isSearched","map","key","style","width","href","Button","onClick","App","setSearchTopStoris","result","setState","onSearchSubmit","state","fetchSearchTopStories","id","updatedList","hits","console","log","onSearchChange","event","target","fetch","then","response","json","catch","error","this","JSON","stringify","onSubmit","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7c317604.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst DEFAULT_QUERY='redux';\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst  PATH_SEARCH = '/search';\nconst PARAM_SEARCH= 'query=';\n\nconst list = [\n  {\n    title: 'React',\n    url: 'https://facebook.github.io/react/',\n    author: 'Jordan Walke',\n    num_comments: 3,\n    points: 4,\n    objectID: 1,\n  },\n  {\n    title: 'Redux',\n    url: 'https://github.com/reactjs/redux',\n    author: 'Dan Abramov, Andrew Clark',\n    num_comments: 2,\n    points: 5,\n    objectID: 2,\n  },\n];\n\nlet counter = 0;\n\nfunction isSearched(searchTerm) {\n  return function (item) {\n    return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n  }\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      list,\n      searchTerm: DEFAULT_QUERY\n    };\n    //this.onDismiss = this.onDismiss.bind(this);\n    console.log(\"Name--constructor\");\n  }\n\n  setSearchTopStoris = (result) =>{\n    this.setState({result});\n  }\n\n  onSearchSubmit = () =>{\n    const {searchTerm} = this.state;\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  fetchSearchTopStories(){\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}`)\n    .then(response => response.json())\n    .then(result => this.setSearchTopStoris(result))\n    .catch(error => error);\n  }\n\n  componentDidMount(){\n    debugger;\n    const {searchTerm}  = this.state;\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}`)\n    .then(response => response.json())\n    .then(result => this.setSearchTopStoris(result))\n    .catch(error => error);\n  }\n\n  onDismiss = (id) => {\n    debugger;\n    function isNotId(item) {\n      return item.objectID !== id;\n\n    }\n    debugger;\n    const updatedList = this.state.result.hits.filter(isNotId);\n    this.setState({ result: \n      {...this.state.result,list: updatedList }\n    });\n    console.log(\"Name--onDismiss\");\n    console.log(updatedList);\n    console.log(this);\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchTerm: event.target.value });\n  }\n  render() {\n    const {searchTerm,result} = this.state;\n    debugger;\n    if(!result){return null};\n\n    counter++;\n    console.log(\"Name--render\" + counter);\n    return (\n      <div className=\"page\">\n      <div className=\"interactions\">\n        {JSON.stringify(this.state)}\n        <Search value={this.state.searchTerm} onChange={this.onSearchChange} onSubmit={this.onSearchSubmit}>Search</Search>\n      </div>\n        {result && <Table list={result.hits} pattern={this.state.searchTerm} onDismiss={this.onDismiss}/>}\n      </div>\n    );\n  }\n}\n\nfunction Search (props){\n    const { value, onChange, children } = props;\n    return (\n      <form>\n       {children} <input type=\"text\" value={value} onChange={onChange} />\n      </form>\n    );\n}\n\nfunction Table(props){\n    const { list, pattern, onDismiss } = props;\n    debugger;\n    return (\n      <div className=\"table\">\n        {list.filter(isSearched(pattern)).map(item =>\n          <div key={item.objectID} className=\"table-row\">\n            <span  style={{ width: '40%' }}>\n              <a href={item.url}>{item.title}</a>\n            </span>\n            <span style={{ width: '30%' }}>{item.author}</span>\n            <span style={{ width: '10%' }}>{item.num_comments}</span>\n            <span style={{ width: '10%' }}>{item.points}</span>\n            <span style={{ width: '10%' }}>\n              <Button className=\"button-inline\"\n                onClick={() => onDismiss(item.objectID)}>\n                Dismiss\n              </Button>\n            </span>\n          </div>\n        )}\n      </div>\n    );\n}\n\nfunction Button(props){\n  const {onClick,className = '',children} = props;\n  return (\n    <button className={className} onClick={onClick} type=\"button\">{children}</button>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nif (module.hot) {\nmodule.hot.accept();\n}\nserviceWorker.unregister();\n"],"sourceRoot":""}